Haskell Markov Chain Text Generator [Fancy Name Required]
---------------------------------------------------------

Basic Design:
	Spelling counts
	Punktuation marks (;,.:) are not considered part of a word.
	Option c: Markov chain itself decides when it should stop (ie when the next word in the markov chain is '$' the eol character.)

Persistent Database:
	Data.HashMap mapping from ByteString to Data.HashMap with the possible successor strings and their count.

In memory Database:
	Data.HashMap mapping from ByteString to Probability.Distribution containing possible successor strings and their probability.

Executional Design:
	Library:
		MBE.Store handles insertion of a ByteString into the persistent database.
		MBE.Markov reads from the persistent database, generates the in memory database and prints out a Markov Chain. (If you want more than 1 Markov chain, it's more efficient to import MDB.LHashMap importDB there and then pass that to recChain rather than using recIOChain).
	Binary:
		addFiletoDB: creates and updates persistent database[s]
		hmctg: Generates Markov Text Chains using an already existing persistent database
		Eventual 3rd binary for manual viewing and editing of database. (Not yet implemented)
